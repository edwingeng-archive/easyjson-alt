// Package bootstrap implements the bootstrapping logic: generation of a .go file to
// launch the actual generator and launching the generator itself.
//
// The package may be preferred to a command-line utility if generating the serializers
// from golang code is required.
package bootstrap

import (
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"sort"
)

const pkgEasyJSON = "github.com/mailru/easyjson"
const genPackage = "github.com/mailru/easyjson/gen"
const pkgWriter = "github.com/mailru/easyjson/jwriter"
const pkgLexer = "github.com/mailru/easyjson/jlexer"

type FileInfo struct {
	Types   []string
	OutName string
}

var buildFlagsRegexp = regexp.MustCompile("'.+'|\".+\"|\\S+")

type Generator struct {
	PkgPath, PkgName string

	FileInfoList []FileInfo

	NoStdMarshalers          bool
	SnakeCase                bool
	LowerCamelCase           bool
	OmitEmpty                bool
	DisallowUnknownFields    bool
	SkipMemberNameUnescaping bool

	BuildTags     string
	GenBuildFlags string

	StubsOnly   bool
	LeaveTemps  bool
	NoFormat    bool
	SimpleBytes bool
}

// writeStub outputs an initial stub for marshalers/unmarshalers so that the package
// using marshalers/unmarshales compiles correctly for boostrapping code.
func (g *Generator) writeStub(types []string, outName string) error {
	f, err := os.Create(outName)
	if err != nil {
		return err
	}
	defer f.Close()

	if g.BuildTags != "" {
		fmt.Fprintln(f, "// +build ", g.BuildTags)
		fmt.Fprintln(f)
	}
	fmt.Fprintln(f, "// TEMPORARY AUTOGENERATED FILE: easyjson stub code to make the package")
	fmt.Fprintln(f, "// compilable during generation.")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "package ", g.PkgName)

	if len(types) > 0 {
		fmt.Fprintln(f)
		fmt.Fprintln(f, "import (")
		fmt.Fprintln(f, `  "`+pkgWriter+`"`)
		fmt.Fprintln(f, `  "`+pkgLexer+`"`)
		fmt.Fprintln(f, ")")
	}

	sort.Strings(types)
	for _, t := range types {
		fmt.Fprintln(f)
		if !g.NoStdMarshalers {
			fmt.Fprintln(f, "func (", t, ") MarshalJSON() ([]byte, error) { return nil, nil }")
			fmt.Fprintln(f, "func (*", t, ") UnmarshalJSON([]byte) error { return nil }")
		}

		fmt.Fprintln(f, "func (", t, ") MarshalEasyJSON(w *jwriter.Writer) {}")
		fmt.Fprintln(f, "func (*", t, ") UnmarshalEasyJSON(l *jlexer.Lexer) {}")
		fmt.Fprintln(f)
		fmt.Fprintln(f, "type EasyJSON_exporter_"+t+" *"+t)
	}
	return nil
}

// writeMain creates a .go file that launches the generator if 'go run'.
func (g *Generator) writeMain() (path string, err error) {
	first := g.FileInfoList[0]
	f, err := ioutil.TempFile(filepath.Dir(first.OutName), "easyjson-bootstrap-")
	if err != nil {
		return "", err
	}

	fmt.Fprintln(f, "// +build ignore")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "// TEMPORARY AUTOGENERATED FILE: easyjson bootstapping code to launch")
	fmt.Fprintln(f, "// the actual generator.")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "package main")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "import (")
	fmt.Fprintln(f, `  "fmt"`)
	fmt.Fprintln(f, `  "os"`)
	fmt.Fprintln(f, `  "syscall"`)
	fmt.Fprintln(f)
	fmt.Fprintf(f, "  %q\n", genPackage)
	for _, fi := range g.FileInfoList {
		if len(fi.Types) > 0 {
			fmt.Fprintln(f)
			fmt.Fprintf(f, "  pkg %q\n", g.PkgPath)
			break
		}
	}
	fmt.Fprintln(f, ")")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "func main() {")
	for i := 0; i < len(g.FileInfoList); i++ {
		fmt.Fprintf(f, "  if err := genCode%d(); err != nil {\n", i)
		fmt.Fprintln(f, "    fmt.Fprintln(os.Stderr, err)")
		fmt.Fprintln(f, "    os.Exit(1)")
		fmt.Fprintln(f, "  }")
	}
	fmt.Fprintln(f, "}")

	for i, fi := range g.FileInfoList {
		fmt.Fprintln(f)
		fmt.Fprintf(f, "func genCode%d() error {\n", i)
		fmt.Fprintf(f, "  g := gen.NewGenerator(%q)\n", filepath.Base(fi.OutName))
		fmt.Fprintf(f, "  g.SetPkg(%q, %q)\n", g.PkgName, g.PkgPath)
		if g.BuildTags != "" {
			fmt.Fprintf(f, "  g.SetBuildTags(%q)\n", g.BuildTags)
		}
		if g.SnakeCase {
			fmt.Fprintln(f, "  g.UseSnakeCase()")
		}
		if g.LowerCamelCase {
			fmt.Fprintln(f, "  g.UseLowerCamelCase()")
		}
		if g.OmitEmpty {
			fmt.Fprintln(f, "  g.OmitEmpty()")
		}
		if g.NoStdMarshalers {
			fmt.Fprintln(f, "  g.NoStdMarshalers()")
		}
		if g.DisallowUnknownFields {
			fmt.Fprintln(f, "  g.DisallowUnknownFields()")
		}
		if g.SimpleBytes {
			fmt.Fprintln(f, "  g.SimpleBytes()")
		}
		if g.SkipMemberNameUnescaping {
			fmt.Fprintln(f, "  g.SkipMemberNameUnescaping()")
		}

		sort.Strings(fi.Types)
		for _, v := range fi.Types {
			fmt.Fprintln(f, "  g.Add(pkg.EasyJSON_exporter_"+v+"(nil))")
		}

		fmt.Fprintf(f, "  f, err := os.Create(%q + \".tmp\")\n", fi.OutName)
		fmt.Fprintln(f, "  if err != nil {")
		fmt.Fprintln(f, "    return err")
		fmt.Fprintln(f, "  }")
		fmt.Fprintln(f)
		if !g.LeaveTemps {
			fmt.Fprintln(f, "  defer os.Remove(f.Name()) // will not remove after rename")
			fmt.Fprintln(f)
		}

		fmt.Fprintln(f, "  if err := syscall.Dup2(int(f.Fd()), syscall.Stdout); err != nil {")
		fmt.Fprintln(f, "    fmt.Fprintln(os.Stderr, err)")
		fmt.Fprintln(f, "    os.Exit(1)")
		fmt.Fprintln(f, "  }")
		fmt.Fprintln(f, "  if err := g.Run(f); err != nil {")
		fmt.Fprintln(f, "    fmt.Fprintln(os.Stderr, err)")
		fmt.Fprintln(f, "    os.Exit(1)")
		fmt.Fprintln(f, "  }")

		fmt.Fprintf(f, "  if err := os.Rename(f.Name(), %q); err != nil {\n", fi.OutName)
		fmt.Fprintln(f, "    return err")
		fmt.Fprintln(f, "  }")
		fmt.Fprintln(f)
		fmt.Fprintln(f, "  return nil")
		fmt.Fprintln(f, "}")
	}

	src := f.Name()
	if err := f.Close(); err != nil {
		return src, err
	}

	dest := src + ".go"
	return dest, os.Rename(src, dest)
}

func (g *Generator) Run() error {
	for _, fi := range g.FileInfoList {
		if err := g.writeStub(fi.Types, fi.OutName); err != nil {
			return err
		}
	}
	if g.StubsOnly {
		return nil
	}

	path, err := g.writeMain()
	if err != nil {
		return err
	}
	if !g.LeaveTemps {
		defer os.Remove(path)
	}

	execArgs := []string{"run"}
	if g.GenBuildFlags != "" {
		buildFlags := buildFlagsRegexp.FindAllString(g.GenBuildFlags, -1)
		execArgs = append(execArgs, buildFlags...)
	}
	execArgs = append(execArgs, "-tags", g.BuildTags, filepath.Base(path))
	cmd := exec.Command("go", execArgs...)

	cmd.Stderr = os.Stderr
	cmd.Dir = filepath.Dir(path)
	if err = cmd.Run(); err != nil {
		return err
	}

	if g.NoFormat {
		return nil
	}

	var files []string
	for _, fi := range g.FileInfoList {
		files = append(files, fi.OutName)
	}
	cmd = exec.Command("gofmt", append([]string{"-w"}, files...)...)
	cmd.Stderr = os.Stderr
	cmd.Stdout = os.Stdout
	return cmd.Run()
}
